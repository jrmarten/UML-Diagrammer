Code Ninjas
demo.txt for uml-diagrammer
Last Update: 10/29/2012
Max Felgenhauer
Tony Klose
Jameson Marten


-Open Eclipse or other IDE program.
-Run the main class of the program.
-Select "New" from the file menu to create a new project.
------------------------------------------------------------------------------------
//Create a starter class
-Select the "Class" tool from the toolbar, then click in screen to create a new class figure
-Double click on the "Class" in your new class figure, and change the name to "DemoClass".
-Click the "+M", then click on the class figure to add a method.  
-Type "public String getName( )" in the Method: window prompt.
      -The method will automatically be formatted correctly.
-Click on the "+A", then click on the class figure to add an attribute.
-Type "private String name" in the Attribute: window prompt.
      -The attribute will automatically be formatted correctly.



//Add methods and attributes
-Right click on the class figure, then select "+M Add Method".
-Type "+ void setName( )" in the Method: window prompt.
-Right click on the class figure, then select "+A Add Attribute".
-Type "- num : int" in the Attribute: window prompt.



//Remove methods and attributes
-Right click on the class figure, then select "-M Remove Method".
-Type "getName" and select ok.  
     -The "+ getName():String" method has been removed from the class.
-Right click on the class figure, then select "-A Remove Attribute".
-Type "num" and select ok.  
     -The "-num:int" attribute has been removed from the class.


//Copy class
-Right click on "DemoClass" and select copy.
-Right click on any open space in the window and select paste.
-Right click on "DemoClass" and select copy.
-Right click on any open space in the window and select paste.


//Modify class
-Double click one of the new "DemoClass" class name, and change the name to "DemoGrade".
-In "DemoGrade" class, right click on the class figure and select "+A Add Attribute".
-Type "- double gradePercent" in the Attribute: window prompt.

-Double click one of the new "DemoClass" class name, and change the name to "DemoAssignment".
-In "DemoAssignment" class, right click on the class figure and select "+A Add Attribute".
-Type "homework : String" in the Attribute: window prompt.



//Add associations
-Click on the "Association" icon (<->) on the toolbar.
-Hover over "DemoAssignment" and click anywhere in the class figure, then drag to "DemoGrade", and release.
-Right click on the newly created association line, and select "Set Start Decoration".
-Select "Composition" and click ok.
-Click on the "Association" icon (<->) on the toolbar.
-Hover over "DemoAssignment" and click anywhere in the class figure, then drag to "DemoClass", and release.
-Right click on the newly created association line, and select "Set End Decoration".
-Select "Aggregation" and click ok.
-Click on the aggregation association just created, then press backspace/delete, or right click and select cut.



//Add inheritance
-Click on the "Inheritance" icon (->) on the toolbar.
-Hover over "DemoAssignment" and click anywhere in the class figure, then drag to "DemoClass", and release.
-Click on the text box on the toolbar, and place a text box by dragging or clicking in between "DemoAssignment" and "DemoClass".
-Type "extends" near the inheritance line to show the desired relationship.



//Create abstract class
-Click on the "Abstract Class" icon on the toolbar.
-Click on the screen to create the new abstract class.
-Double click on the "Class" name of your abstract class.
-Type "GradeCalculator".
-Right click and select "+M Add Method".
-Type "+determineAverage(double):double".
-Click on the "Inheritance" icon (->) on the toolbar.
-Hover over "DemoGrade", and click and drag to "GradeCalculator".



//Create an interface
-Click on the "Interface" icon on the toolbar.
-Click on the screen to create a new interface.
-Double click on the "Class" name of the interface.
-Type "DemoCalculator".
-Right click on the "DemoCalculator" interface, and select "+M Add Method".
-Type "calculate()".



//Debug
-Click on the "Debug Snap Shot" icon on the toolbar.
-View the results in a quick "snap shot" in the Java console.



//Generate Java code
-Click on the "Generate Java" {j} icon on the toolbar.
-Select the directory to generate the Java code, select ok.



//Save XML file
-Select "Save" or "Save-As" from the file menu.
-Save the created project as "CodeNinjasUML".
-File is now saved as "CodeNinjasUML.xml".

















------------------------------------------------------------------------------------
How-to-styyyyle
Documentation



Create a new class diagram:
-Select the "Class" tool from the toolbar, then click in screen to create a new class figure
	-Double click on the "Class" text to change the name of the class


Method addition, removal, and features:
-Utilize the toolbar buttons to add a method
	 -Click the "+M" button on the toolbar to add a new method, then click the class to add the method
	 	-Name the method with a normal convention, which will be read in and formatted
	 	-The result is shown in the Java console
	       	     ie) Method: public String getName()
	       	     ie) Method: + getName() : String

	       	     -No input for the access modifier will be automatically default access(~)
	       	     	 ie) Method: getName() : String


-Utilize the right click feature on the class figure to add a method, or remove a method
	 -Add a new method
		-Right click on the class figure and select "+M Add Method"
	 	-Type the method name with a normal convention, which will be read in and formatted
	-Remove a method
		-Right click on the class figure and select "-M Remove Method"
		-Type in the name of the method to be removed
		      -If removing an overloaded method, you must place the name of the method in quotation marks(") exactly how it appears in the diagram



Attribute addition, removal, and features:
-Utilize the toolbar buttons to add an attribute
	  -Click the "+A" button  on the toolbar to add a new attribute, then click the class to add the attribute
	          -Name the attribute with a normal convention, which will be read in and formatted	
		          -User input examples...
                     	       ie) Attribute: "public String name"
                     	       ie) Attribute: "+ String name"
			       ie) Attribute: "- name : String"

                     -No input for the access modifier will be automatically default access(~)
		     	       ie) Attribute: "String name"
			       ie) Attribute: "name : String"


-Utilize the right-click feature on class figure to add an attribute, or remove an attribute
	 -Add a new attribute
	      -Right click on the class figure and select "+A Add Attribute"
	      -Type the attribute name with a normal convention, which will be read in and formatted
	
	 -Remove an attribute
	 	-Remove a method
                -Right click on the class figure and select "-A Remove Attribute"
                -Type in the name of the attribute to be removed




Association:
-Select the "Association" icon (<->) from the toolbar
	-Hover over the first class, click and drag from the first class to any other class to add an association
	-Right click on the newly created association line and select "Set Start Decoration"
	       -Select the type of association to be added to the start of the association line, then click ok
	-Right click on the association line and select "Set End Decoration"
	       -Select the type of association to be added to the end of the association line, then click ok

	-Utilize the text box to add values to the association	  
		 -Select the "Text Area" from the General Actions toolbar
		 -Drag and drop, or simply click, to add a new text window
		       -Add desired text to show types of relationships, 
Inheritance:

Extra features:
